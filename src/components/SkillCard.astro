---
interface Props {
  skill: {
    skill_id: string;
    name: string;
    description: string;
    icon: string;
    tags: string[];
    compatibility: string[];
  };
}

const { skill } = Astro.props;
---

<div class="skill-card bg-white shadow-md rounded-lg p-6 hover:bg-gray-100 transition-all">
  <div class="flex items-start gap-4">
    <img src={skill.icon || 'https://pngimg.com/d/question_mark_PNG6.png'} alt={skill.name} class="w-12 h-12" />
    <div class="flex-1">
      <h3 class="skill-title text-xl font-semibold text-gray-800 mb-2">{skill.name}</h3>
      <p class="skill-description text-gray-600 mb-4">{skill.description}</p>
      <div class="flex flex-wrap gap-2 mb-4">
        {skill.tags.map((tag) => (
          <span class="skill-tags text-sm px-2 py-1 rounded-full bg-red-100 text-red-700">
            {tag}
          </span>
        ))}
      </div>
      <div class="flex flex-wrap gap-2 mb-4">
        {skill.compatibility && skill.compatibility.length > 0 && skill.compatibility.map((compat) => (
          <span class="compatible-badge text-sm px-2 py-1 rounded-full bg-green-100 text-green-700">
            Compatible with {compat}
          </span>
        ))}
      </div>
      <button
        class="install-btn bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg transition-colors"
        onclick={`showModal('${skill.skill_id}')`}
      >
        Install Skill
      </button>
    </div>
  </div>
</div>

<div id="modal" class="modal hidden fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 p-3">
  <div class="modal-content bg-white p-6 rounded-lg shadow-lg">
    <h2 class="text-lg font-semibold mb-4">Install Skill</h2>
    <p class="text-gray-700 mb-4">
      Make sure your device is near the speaker and ensure your device is on unmute and at maximum volume. Click "Play" to transmit the code.
    </p>
    <div class="flex gap-4 justify-end" id="before-transmission">
      <button
        class="bg-gray-200 hover:bg-gray-300 text-gray-700 px-4 py-2 rounded-lg"
        onclick="closeModal()"
      >
        Cancel
      </button>
      <button
        class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg"
        onclick="playCode()"
      >
        Play
      </button>
    </div>
    <div id="after-transmission" class="hidden flex gap-4 justify-end mt-4">
      <button
        class="bg-gray-200 hover:bg-gray-300 text-gray-700 px-4 py-2 rounded-lg"
        onclick="closeModal()"
      >
        Close
      </button>
      <button
        class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg"
        onclick="playCode()"
      >
        Retransmit
      </button>
    </div>
  </div>
</div>

<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/ggwave@0.4.0/ggwave.min.js"></script>
<script type="module">
  let context = null;
  let ggwave = null;
  let parameters = null;
  let instance = null;
  let currentSkillId = null;

  ggwave_factory().then((obj) => {
    ggwave = obj;
  });

  function init() {
    if (!context) {
      context = new AudioContext({ sampleRate: 48000 });

      parameters = ggwave.getDefaultParameters();
      parameters.sampleRateInp = context.sampleRate;
      parameters.sampleRateOut = context.sampleRate;
      instance = ggwave.init(parameters);
    }
  }

  function convertTypedArray(src, type) {
    const buffer = new ArrayBuffer(src.byteLength);
    new src.constructor(buffer).set(src);
    return new type(buffer);
  }

  function showModal(skillId) {
    currentSkillId = skillId;
    document.getElementById('modal').classList.remove('hidden');
    document.getElementById('after-transmission').classList.add('hidden');
    document.getElementById('before-transmission').classList.remove('hidden');
  }

  function closeModal() {
    document.getElementById('modal').classList.add('hidden');
  }

  function playCode() {
    init();

    if (!ggwave || !context || !currentSkillId) {
      console.error("GGWave, AudioContext, or Skill ID is not initialized.");
      return;
    }

    try {
      const waveform = ggwave.encode(
        instance,
        `PIP: ${currentSkillId}`,
        ggwave.ProtocolId.GGWAVE_PROTOCOL_AUDIBLE_FAST,
        10
      );

      const buf = convertTypedArray(waveform, Float32Array);
      const buffer = context.createBuffer(1, buf.length, context.sampleRate);
      buffer.getChannelData(0).set(buf);

      const source = context.createBufferSource();
      source.buffer = buffer;

      const gainNode = context.createGain();
      gainNode.gain.value = 1.0;
      source.connect(gainNode).connect(context.destination);

      source.start(0);
      console.log(`Audio playback started for skill: PIP: ${currentSkillId}`);
      document.getElementById('after-transmission').classList.remove('hidden');
      document.getElementById('before-transmission').classList.add('hidden');
    } catch (error) {
      console.error("Error transmitting package:", error);
    }
  }

  // Expose functions globally
  window.showModal = showModal;
  window.closeModal = closeModal;
  window.playCode = playCode;
</script>